import re

html_str = """
<body>
<div>Some text
<div>Some text2
<div><div>Lorem</div></div>
</body>
"""


# Результат:
# ["body.div[0]", "body.div[1]"]


def find_tag(html: str, parent_list=None):
    if parent_list is None:
        parent_list = []
    pattern = r'(\<([^>]+)>)'
    x = re.search(pattern, html)
    if x is None:
        return True
    parent = x.group()
    parent_list.append(parent)
    if html.rfind(parent) != -1:
        new_html = html[x.span()[1]:]
        find_tag(new_html, parent_list)
    return parent_list


def my_parser(html_tgs_list):
    result = []
    open_tag = []
    close_tag = []
    a = ''
    exc = []
    for i, el in enumerate(html_tgs_list):
        if '/' in el:
            close_tag.append(el)
        else:
            open_tag.append(el)
    len_range = len(close_tag) - 1
    for i in range(len_range):
        if html_tgs_list[i] == html_tgs_list[i - 1].replace('/', ''):
            open_tag.pop(i - 1)
        else:
            tag_o = open_tag.pop(i - 1)
            result.append(tag_o)
    if html_tgs_list[0] == html_tgs_list[-1].replace('/', ''):
        open_tag.pop(-1)
    else:
        tag_o = open_tag.pop(-1)
        result.append(tag_o)
    for x, el in enumerate(open_tag):
        for y in result:
            a += y + '.'
        a += f'{el}[{x}]'
        exc.append(a.replace('<', '').replace('>', ''))
        a = ''
    return exc


def main():
    html_tree = find_tag(html_str)
    print(my_parser(html_tree))


if __name__ == "__main__":
    main()
